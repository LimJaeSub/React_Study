{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wotjw\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\React_Study\\\\05-http-project\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoding] = useState(false);\n  const [error, setError] = useState(null);\n\n  // @useCallback을 사용해 불필요하게 재생성되는 경우 방지\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoding(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"somethin went wrong\");\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoding(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoding(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"fount no movies\");\n  if (movies.length > 0) {\n    // @ movies가 잘 들어왔으면\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    });\n  }\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }, error);\n  }\n  if (isLoading) {\n    // @ 로딩중이면\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, content));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","App","movies","setMovies","isLoading","setIsLoding","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"sources":["C:/Users/wotjw/OneDrive/문서/GitHub/React_Study/05-http-project/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport MoviesList from \"./components/MoviesList\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoding] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // @useCallback을 사용해 불필요하게 재생성되는 경우 방지\r\n  const fetchMoviesHandler = useCallback(async () => {\r\n    setIsLoding(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"https://swapi.dev/api/films/\");\r\n      if (!response.ok) {\r\n        throw new Error(\"somethin went wrong\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      const transformedMovies = data.results.map((movieData) => {\r\n        return {\r\n          id: movieData.episode_id,\r\n          title: movieData.title,\r\n          openingText: movieData.opening_crawl,\r\n          releaseDate: movieData.release_date,\r\n        };\r\n      });\r\n      setMovies(transformedMovies);\r\n      setIsLoding(false);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setIsLoding(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMoviesHandler();\r\n  }, [fetchMoviesHandler]);\r\n\r\n  let content = <p>fount no movies</p>;\r\n\r\n  if (movies.length > 0) {\r\n    // @ movies가 잘 들어왔으면\r\n    content = <MoviesList movies={movies} />;\r\n  }\r\n  if (error) {\r\n    content = <p>{error}</p>;\r\n  }\r\n  if (isLoading) {\r\n    // @ 로딩중이면\r\n    content = <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAE/D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAElB,SAASC,GAAG,GAAG;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMW,kBAAkB,GAAGT,WAAW,CAAC,YAAY;IACjDM,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAElC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAK;QACxD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UAAU;UACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACH,CAAC,CAAC;MACFtB,SAAS,CAACY,iBAAiB,CAAC;MAC5BV,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;MACvBrB,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;EAENP,SAAS,CAAC,MAAM;IACdU,kBAAkB,EAAE;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,IAAImB,OAAO,gBAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAAsB;EAEpC,IAAIzB,MAAM,CAAC0B,MAAM,GAAG,CAAC,EAAE;IACrB;IACAD,OAAO,gBAAG,oBAAC,UAAU;MAAC,MAAM,EAAEzB,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EAC1C;EACA,IAAII,KAAK,EAAE;IACTqB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIrB,KAAK,CAAK;EAC1B;EACA,IAAIF,SAAS,EAAE;IACb;IACAuB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAAiB;EAC7B;EAEA,oBACE,oBAAC,KAAK,CAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEnB,kBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAAsB,CAClD,eACV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAUmB,OAAO,CAAW,CACb;AAErB;AAEA,eAAe1B,GAAG"},"metadata":{},"sourceType":"module"}